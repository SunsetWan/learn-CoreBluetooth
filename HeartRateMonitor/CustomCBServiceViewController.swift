/// Copyright (c) 2022 Razeware LLC
/// 
/// Permission is hereby granted, free of charge, to any person obtaining a copy
/// of this software and associated documentation files (the "Software"), to deal
/// in the Software without restriction, including without limitation the rights
/// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
/// copies of the Software, and to permit persons to whom the Software is
/// furnished to do so, subject to the following conditions:
/// 
/// The above copyright notice and this permission notice shall be included in
/// all copies or substantial portions of the Software.
/// 
/// Notwithstanding the foregoing, you may not use, copy, modify, merge, publish,
/// distribute, sublicense, create a derivative work, and/or sell copies of the
/// Software in any work that is designed, intended, or marketed for pedagogical or
/// instructional purposes related to programming, coding, application development,
/// or information technology.  Permission for such use, copying, modification,
/// merger, publication, distribution, sublicensing, creation of derivative works,
/// or sale is expressly withheld.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
/// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
/// THE SOFTWARE.

import UIKit
import CoreBluetooth

struct CustomCBUUID {
  private init() {}
  static var customServiceCBUUID: CBUUID {
    return CBUUID(string: "57A3E665-BD1E-4136-AB29-EE6C574066AB")
  }
  
  static var characteristicUUID: CBUUID {
    return CBUUID(string: "540001D5-D255-4467-9C4C-7FC838EEDCC8")
  }
}

class CustomCBServiceViewController: UIViewController {

  
  private var myPeripheralManager: CBPeripheralManager!
  
  /// UUID string is generated by `uuidgen` cmd tool
  private let myCustomServiceUUID = CustomCBUUID.customServiceCBUUID
  private var myService: CBMutableService!
  
  private let myCharacteristicUUID = CustomCBUUID.characteristicUUID
  
  /// If you need the value of a characteristic to be writeable,
  /// or if you expect the value to change during the lifetime of the published service to which the characteristic belongs,
  /// you must specify the value as nil.
  private var myCharacteristic: CBMutableCharacteristic!
  
  
  private let helloData = "Hello".data(using: .utf8)
  
  override func viewDidLoad() {
    super.viewDidLoad()
    view.backgroundColor = .white
    navigationItem.title = "Custom CBService"
    
    configCBCharacteristic()
    configCBService()
    
    myPeripheralManager = CBPeripheralManager(delegate: self, queue: nil)
  }
  
  override func viewWillDisappear(_ animated: Bool) {
    super.viewWillDisappear(animated)
    if myPeripheralManager.isAdvertising {
      myPeripheralManager.stopAdvertising()
    }
  }
  
  private func configCBCharacteristic() {
    myCharacteristic = CBMutableCharacteristic(type: myCharacteristicUUID,
                                               properties: .write,
                                               value: nil,
                                               permissions: .writeable)
  }
  
  private func configCBService() {
    /// A primary service describes the primary functionality of a device and can be included (referenced) by another service.
    /// A secondary service describes a service that is relevant only in the context of another service that has referenced it.
    /// For example, the primary service of a heart rate monitor may be to expose heart rate data from the monitor‚Äôs heart rate sensor,
    /// whereas a secondary service may be to expose the sensor‚Äôs battery data.
    myService = CBMutableService(type: myCustomServiceUUID, primary: true)
    myService.characteristics = [myCharacteristic]
  }
  
  private func configPeripheralManager() {
    myPeripheralManager.startAdvertising([CBAdvertisementDataServiceUUIDsKey: [myService.uuid]])
  }
  
}

/// MARK: CBPeripheralDelegate
extension CustomCBServiceViewController: CBPeripheralManagerDelegate {
  
  func peripheralManager(_ peripheral: CBPeripheralManager, didReceiveRead request: CBATTRequest) {
    print(#function)
    view.backgroundColor = [.red, .black, .blue, .brown, .cyan, .green].randomElement()
  }
  
  func peripheralManager(_ peripheral: CBPeripheralManager, didReceiveWrite requests: [CBATTRequest]) {
    print(#function)
    view.backgroundColor = [.red, .black, .blue, .brown, .cyan, .green].randomElement()
  }
  
  func peripheralManagerDidUpdateState(_ peripheral: CBPeripheralManager) {
    switch peripheral.state {
    case .poweredOn:
      
      /// After you publish a service and any of its associated characteristics to the peripheral‚Äôs database,
      /// the service is cached and you can no longer make changes to it.
      myPeripheralManager.add(myService)
      
      configPeripheralManager()
    @unknown default:
      break
    }
  }
  
  func peripheralManager(_ peripheral: CBPeripheralManager, didAdd service: CBService, error: Error?) {
    guard error == nil else {
      fatalError()
    }
    print(#function)
  }
  
  /// 1. Data advertising is done on a ‚Äúbest effort‚Äù basis,
  /// because space is limited and there may be multiple apps advertising simultaneously.
  /// üîóÔºöhttps://developer.apple.com/documentation/corebluetooth/cbperipheralmanager/1393252-startadvertising
  ///
  /// 2. Advertising behavior is also affected when your app is in the background.
  /// üîóÔºöhttps://developer.apple.com/library/archive/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/CoreBluetoothBackgroundProcessingForIOSApps/PerformingTasksWhileYourAppIsInTheBackground.html#//apple_ref/doc/uid/TP40013257-CH7-SW1
  func peripheralManagerDidStartAdvertising(_ peripheral: CBPeripheralManager, error: Error?) {
    guard error == nil else {
      fatalError()
    }
    print(#function)
  }
}

fileprivate enum t_Test {
  case A
  case B
  //  case C
}

extension CustomCBServiceViewController {
  private func t_switch_unknow_default() {
    let testEnum: t_Test = .A
    
    /// Switch must be exhaustive
    switch testEnum {
    case .A:
      print("A")
    case .B:
      print("B")
    }
    
    switch testEnum {
    case .A:
      print("A")
    default:
      print("unhandled!")
    }
    
    switch testEnum {
    case .A:
      print("A")
    @unknown default:
      print("unhandled!")
    }
  }
}
